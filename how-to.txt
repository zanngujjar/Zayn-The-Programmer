# Blog System Documentation: From Home Page to Individual Blog Posts

## Overview
This document outlines the complete blog system implementation, including data flow, API endpoints, CSS formatting, and component structure from the home page to individual blog posts.

## 1. Home Page Integration

### Navigation to Blog
- **Route**: `/how-to` (How-To Guides section)
- **Component**: `app/how-to/page.tsx`
- **Navigation**: Accessible via main navigation menu

### Home Page Structure
```tsx
// app/page.tsx
<Navigation />
<HeroSection />
<SkillsSection />
<ProjectsSection />
<ContactSection />
<Footer />
```

## 2. Blog Main Page (`/how-to`)

### Component Structure
- **File**: `app/how-to/page.tsx`
- **Type**: Client-side component with state management
- **Layout**: Responsive grid with search and filtering

### Data Flow
1. **API Calls**: 
   - `getHowToPosts()` - Fetches all posts with pagination/sorting
   - `getFeaturedHowToPosts()` - Fetches featured posts
2. **State Management**:
   - `posts` - Array of all blog posts
   - `featuredPosts` - Array of featured posts
   - `loading` - Loading state
   - `searchQuery` - Search input
   - `sortBy` - Sort option (featured, recent, popular, views)

### API Endpoints Used
- **Base URL**: `https://zayn-the-programmer-backend.onrender.com/api/how-to`
- **Endpoints**:
  - `GET /api/how-to` - Get all posts with query parameters
  - `GET /api/how-to/featured` - Get featured posts

### CSS Classes and Styling

#### Main Container
```css
min-h-screen bg-background
container mx-auto px-4 sm:px-6 lg:px-8 py-8
```

#### Header Section
```css
text-center mb-12
text-4xl md:text-5xl font-bold text-foreground mb-4 font-playfair
text-xl text-muted-foreground max-w-2xl mx-auto
```

#### Search and Filter Bar
```css
flex flex-col sm:flex-row gap-4 mb-8
flex-1 relative
pl-10 (for search input with icon)
w-[140px] (for select dropdown)
```

#### Posts Grid
```css
grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6
```

#### Individual Post Cards
```css
group hover:shadow-lg transition-shadow duration-300
aspect-video bg-muted rounded-t-lg overflow-hidden
w-full h-full object-cover group-hover:scale-105 transition-transform duration-300
```

### Post Card Data Structure
Each post card displays:
- **Thumbnail**: `post.thumbnail_url` or category icon fallback
- **Category Badge**: `post.category.name` with `post.category.color`
- **Featured Badge**: Yellow badge if `post.featured` is true
- **Title**: `post.title` with hover effects
- **Excerpt**: `post.excerpt` (3 lines max)
- **Meta Info**: Read time, view count, publish date
- **Tags**: Up to 3 tags with overflow indicator

## 3. Individual Blog Post Page (`/how-to/[slug]`)

### Component Structure
- **File**: `app/how-to/[slug]/page.tsx`
- **Type**: Client-side component with dynamic routing
- **Layout**: Single column article layout

### Data Flow
1. **URL Parameter**: Extracts `slug` from URL
2. **API Call**: `getHowToPost(slug)` - Fetches single post
3. **View Tracking**: `trackHowToPostView()` - Tracks page views
4. **Content Sanitization**: `sanitizeContent()` - Sanitizes HTML content

### API Endpoints Used
- **Get Post**: `GET /api/how-to/{slug}`
- **Track View**: `POST /api/how-to/{slug}/view`

### CSS Classes and Styling

#### Main Layout
```css
min-h-screen bg-background
container mx-auto px-4 sm:px-6 lg:px-8 py-8
max-w-4xl mx-auto
```

#### Article Header
```css
mb-8
flex items-center gap-2 mb-4
text-4xl md:text-5xl font-bold text-foreground mb-4 font-playfair leading-tight
text-xl text-muted-foreground mb-6 leading-relaxed
flex flex-wrap items-center gap-6 text-sm text-muted-foreground mb-6
```

#### Featured Image
```css
aspect-video bg-muted rounded-lg overflow-hidden
w-full h-full object-cover
```

#### Article Content
```css
prose prose-lg max-w-none dark:prose-invert
article-content (custom class for content styling)
```

### Content Styling (from globals.css)

#### Typography
```css
.article-content h1 {
  @apply text-4xl font-bold text-foreground mb-6 mt-8 first:mt-0;
}

.article-content h2 {
  @apply text-3xl font-semibold text-foreground mb-4 mt-6;
}

.article-content h3 {
  @apply text-2xl font-semibold text-foreground mb-3 mt-5;
}

.article-content p {
  @apply text-base text-foreground mb-4 leading-relaxed;
}
```

#### Code Blocks
```css
.article-content pre {
  @apply p-6 rounded-lg overflow-x-auto mb-4 shadow-sm border;
  background-color: #f8f9fa;
  border-color: hsl(var(--border));
  position: relative;
}

.article-content pre::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background: linear-gradient(90deg, hsl(var(--primary)), hsl(var(--secondary)));
  border-radius: 0.5rem 0.5rem 0 0;
}
```

#### Inline Code
```css
.article-content code {
  @apply px-2 py-1 rounded text-sm font-mono;
  background-color: hsl(var(--muted));
  color: hsl(var(--primary));
  border: 1px solid hsl(var(--border));
}
```

#### Lists and Other Elements
```css
.article-content ul {
  @apply list-disc list-inside mb-4 space-y-2;
}

.article-content ol {
  @apply list-decimal list-inside mb-4 space-y-2;
}

.article-content blockquote {
  @apply border-l-4 border-primary pl-4 italic text-muted-foreground mb-4;
}

.article-content a {
  @apply text-primary hover:text-primary/80 underline;
}
```

## 4. Data Structures

### HowToPost Interface
```typescript
interface HowToPost {
  id: string
  slug: string
  title: string
  excerpt: string
  content?: string
  thumbnail_url: string
  author: string
  category: {
    id: string
    name: string
    slug: string
    color: string
    icon: string
  }
  tags: Array<{
    id: string
    name: string
    slug: string
    color: string
  }>
  featured: boolean
  read_time: string
  view_count: number
  published_at: string
  created_at: string
}
```

### API Parameters
```typescript
interface HowToApiParams {
  page?: number
  limit?: number
  sort?: 'recent' | 'popular' | 'views' | 'featured'
  category?: string
  tag?: string
  featured?: boolean
}
```

## 5. API Integration

### Backend API Routes (Next.js)
- **File**: `app/api/blog/*/route.ts`
- **Purpose**: Proxy to external backend API
- **Base URL**: `http://localhost:8000/api/blog` (development)

#### Available Routes:
- `GET /api/blog/recent` - Recent posts
- `GET /api/blog/popular` - Popular posts
- `GET /api/blog/categories` - All categories
- `GET /api/blog/tags` - All tags
- `POST /api/blog/posts/[slug]/view` - Track post view

### External API Integration
- **Base URL**: `https://zayn-the-programmer-backend.onrender.com/api/how-to`
- **Authentication**: None required
- **Caching**: 5-minute revalidation (`next: { revalidate: 300 }`)

## 6. Utility Functions

### Content Processing
- **`sanitizeContent()`**: Removes dangerous HTML, adds syntax highlighting
- **`formatViewCount()`**: Formats large numbers (1K, 1M)
- **`estimateReadingTime()`**: Calculates reading time from content
- **`generateMetaDescription()`**: Creates SEO-friendly descriptions

### Styling Utilities
- **`getCategoryColor()`**: Gets category color with fallback
- **`getTagColor()`**: Gets tag color with fallback
- **`formatTags()`**: Limits displayed tags with overflow indicator

## 7. Responsive Design

### Breakpoints
- **Mobile**: `grid-cols-1` (default)
- **Tablet**: `md:grid-cols-2`
- **Desktop**: `lg:grid-cols-3`

### Responsive Classes
- **Text**: `text-4xl md:text-5xl`
- **Spacing**: `px-4 sm:px-6 lg:px-8`
- **Layout**: `flex-col sm:flex-row`
- **Grid**: `grid-cols-1 md:grid-cols-2 lg:grid-cols-3`

## 8. Theme Support

### Color Variables
- **Primary**: Professional green (`oklch(0.55 0.15 142)`)
- **Background**: White/Light (`oklch(1 0 0)`)
- **Foreground**: Dark gray (`oklch(0.35 0 0)`)
- **Muted**: Light green (`oklch(0.98 0.02 142)`)

### Dark Mode
- Automatic theme switching
- Dark-specific color overrides
- Syntax highlighting adjustments
- Code block styling updates

## 9. Performance Optimizations

### Caching Strategy
- **API Responses**: 5-minute revalidation
- **Static Generation**: Pre-rendered pages where possible
- **Image Optimization**: Next.js automatic optimization

### Loading States
- **Skeleton Loading**: Spinner during data fetch
- **Error Handling**: Graceful fallbacks and 404 pages
- **Progressive Enhancement**: Works without JavaScript

## 10. SEO Features

### Meta Tags
- **Title**: Post title
- **Description**: Post excerpt (160 chars max)
- **Structured Data**: HowTo schema markup
- **Open Graph**: Social media sharing

### URL Structure
- **Blog List**: `/how-to`
- **Individual Post**: `/how-to/[slug]`
- **Clean URLs**: SEO-friendly slugs

This documentation provides a complete overview of the blog system implementation, from the home page navigation to individual blog post rendering, including all data structures, API endpoints, CSS classes, and styling approaches used throughout the system.
